
Electric Water Heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000953  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066a  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b0  00000000  00000000  00001311  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034c  00000000  00000000  00001ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002031  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 84 00 	call	0x108	; 0x108 <main>
  64:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Seven_Segment_init>:
#include <util/delay.h>


void Seven_Segment_init()
{
	DIO_init(PORT_A,PIN0,OUTPUT);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_init>
	DIO_init(PORT_A,PIN1,OUTPUT);
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	61 e0       	ldi	r22, 0x01	; 1
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_init>
	DIO_init(PORT_A,PIN2,OUTPUT);
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	62 e0       	ldi	r22, 0x02	; 2
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_init>
	DIO_init(PORT_A,PIN3,OUTPUT);
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	63 e0       	ldi	r22, 0x03	; 3
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_init>
	DIO_init(PORT_A,PIN4,OUTPUT);
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	64 e0       	ldi	r22, 0x04	; 4
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_init>
	DIO_init(PORT_A,PIN5,OUTPUT);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	65 e0       	ldi	r22, 0x05	; 5
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_init>
  a8:	08 95       	ret

000000aa <Seven_Segment_Enable1>:
}

void Seven_Segment_Enable1()
{
	SET_BIT(S7_PORT,S7_Enable1);
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	08 95       	ret

000000b2 <Seven_Segment_Enable2>:
}
void Seven_Segment_Enable2()
{
	SET_BIT(S7_PORT,S7_Enable2);
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	08 95       	ret

000000ba <Seven_Segment_Disable1>:
}
void Seven_Segment_Disable1()
{
	CLEAR_BIT(S7_PORT,S7_Enable1);
  ba:	8b b3       	in	r24, 0x1b	; 27
  bc:	8f 7d       	andi	r24, 0xDF	; 223
  be:	8b bb       	out	0x1b, r24	; 27
  c0:	08 95       	ret

000000c2 <Seven_Segment_Disable2>:
}
void Seven_Segment_Disable2()
{
	CLEAR_BIT(S7_PORT,S7_Enable2);
  c2:	8b b3       	in	r24, 0x1b	; 27
  c4:	8f 7e       	andi	r24, 0xEF	; 239
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	08 95       	ret

000000ca <Seven_Segment_Write>:
}
void Seven_Segment_Write(uint8_t number)
{
  ca:	cf 93       	push	r28
	uint8_t unitDigit=0,tensDigit=0;
	unitDigit=number%10;
  cc:	9d ec       	ldi	r25, 0xCD	; 205
  ce:	89 9f       	mul	r24, r25
  d0:	91 2d       	mov	r25, r1
  d2:	11 24       	eor	r1, r1
  d4:	c9 2f       	mov	r28, r25
  d6:	c6 95       	lsr	r28
  d8:	c6 95       	lsr	r28
  da:	c6 95       	lsr	r28
  dc:	cc 0f       	add	r28, r28
  de:	2c 2f       	mov	r18, r28
  e0:	22 0f       	add	r18, r18
  e2:	22 0f       	add	r18, r18
  e4:	c2 0f       	add	r28, r18
  e6:	8c 1b       	sub	r24, r28
  e8:	c8 2f       	mov	r28, r24
	tensDigit=number /10;
  ea:	96 95       	lsr	r25
  ec:	96 95       	lsr	r25
  ee:	96 95       	lsr	r25
	
	S7_PORT =(tensDigit<<0);
  f0:	9b bb       	out	0x1b, r25	; 27
	Seven_Segment_Enable1();
  f2:	0e 94 55 00 	call	0xaa	; 0xaa <Seven_Segment_Enable1>
	Seven_Segment_Disable1();
  f6:	0e 94 5d 00 	call	0xba	; 0xba <Seven_Segment_Disable1>
	
	S7_PORT =(unitDigit<<0);
  fa:	cb bb       	out	0x1b, r28	; 27
	Seven_Segment_Enable2();
  fc:	0e 94 59 00 	call	0xb2	; 0xb2 <Seven_Segment_Enable2>
	Seven_Segment_Disable2();
 100:	0e 94 61 00 	call	0xc2	; 0xc2 <Seven_Segment_Disable2>
	
	
	
	
}
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <main>:



void main()
{
	 Seven_Segment_init();
 108:	0e 94 36 00 	call	0x6c	; 0x6c <Seven_Segment_init>
	while(1){

	 Seven_Segment_Write(50);
 10c:	82 e3       	ldi	r24, 0x32	; 50
 10e:	0e 94 65 00 	call	0xca	; 0xca <Seven_Segment_Write>
 112:	fc cf       	rjmp	.-8      	; 0x10c <main+0x4>

00000114 <DIO_init>:

/*          PIN initialization                 */

void DIO_init(uint8_t PORT,uint8_t PIN,uint8_t direction)
{
	switch (PORT)
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	19 f1       	breq	.+70     	; 0x15e <DIO_init+0x4a>
 118:	30 f0       	brcs	.+12     	; 0x126 <DIO_init+0x12>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	e1 f1       	breq	.+120    	; 0x196 <DIO_init+0x82>
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	09 f4       	brne	.+2      	; 0x124 <DIO_init+0x10>
 122:	55 c0       	rjmp	.+170    	; 0x1ce <DIO_init+0xba>
 124:	08 95       	ret
	{
	case PORT_A :
	switch (direction)
 126:	44 23       	and	r20, r20
 128:	19 f0       	breq	.+6      	; 0x130 <DIO_init+0x1c>
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	69 f0       	breq	.+26     	; 0x148 <DIO_init+0x34>
 12e:	08 95       	ret
	{
		case INPUT:
		CLEAR_BIT(DDRA,PIN);
 130:	2a b3       	in	r18, 0x1a	; 26
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_init+0x28>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_init+0x24>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	8a bb       	out	0x1a, r24	; 26
		break;
 146:	08 95       	ret
		case OUTPUT:
		SET_BIT(DDRA,PIN);
 148:	2a b3       	in	r18, 0x1a	; 26
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_init+0x40>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_init+0x3c>
 158:	82 2b       	or	r24, r18
 15a:	8a bb       	out	0x1a, r24	; 26
		break;
 15c:	08 95       	ret
		/* Do Nothing*/
		break;
	}
		break;
	case PORT_B:
	switch (direction)
 15e:	44 23       	and	r20, r20
 160:	19 f0       	breq	.+6      	; 0x168 <DIO_init+0x54>
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	69 f0       	breq	.+26     	; 0x180 <DIO_init+0x6c>
 166:	08 95       	ret
	{
		case INPUT:
		CLEAR_BIT(DDRB,PIN);
 168:	27 b3       	in	r18, 0x17	; 23
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_init+0x60>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_init+0x5c>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	87 bb       	out	0x17, r24	; 23
		break;
 17e:	08 95       	ret
		case OUTPUT:
		SET_BIT(DDRB,PIN);
 180:	27 b3       	in	r18, 0x17	; 23
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_init+0x78>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_init+0x74>
 190:	82 2b       	or	r24, r18
 192:	87 bb       	out	0x17, r24	; 23
		break;
 194:	08 95       	ret
		/* Do Nothing*/
		break;
	}
		break;
	case PORT_C :
	switch (direction)
 196:	44 23       	and	r20, r20
 198:	19 f0       	breq	.+6      	; 0x1a0 <DIO_init+0x8c>
 19a:	41 30       	cpi	r20, 0x01	; 1
 19c:	69 f0       	breq	.+26     	; 0x1b8 <DIO_init+0xa4>
 19e:	08 95       	ret
	{
		case INPUT:
		CLEAR_BIT(DDRC,PIN);
 1a0:	24 b3       	in	r18, 0x14	; 20
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_init+0x98>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_init+0x94>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	84 bb       	out	0x14, r24	; 20
		break;
 1b6:	08 95       	ret
		case OUTPUT:
		SET_BIT(DDRC,PIN);
 1b8:	24 b3       	in	r18, 0x14	; 20
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_init+0xb0>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_init+0xac>
 1c8:	82 2b       	or	r24, r18
 1ca:	84 bb       	out	0x14, r24	; 20
		break;
 1cc:	08 95       	ret
		/* Do Nothing*/
		break;
	}
		break;
	case PORT_D :
	switch (direction)
 1ce:	44 23       	and	r20, r20
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <DIO_init+0xc4>
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	69 f0       	breq	.+26     	; 0x1f0 <DIO_init+0xdc>
 1d6:	08 95       	ret
	{
		case INPUT:
		CLEAR_BIT(DDRD,PIN);
 1d8:	21 b3       	in	r18, 0x11	; 17
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_init+0xd0>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_init+0xcc>
 1e8:	80 95       	com	r24
 1ea:	82 23       	and	r24, r18
 1ec:	81 bb       	out	0x11, r24	; 17
		break;
 1ee:	08 95       	ret
		case OUTPUT:
		SET_BIT(DDRD,PIN);
 1f0:	21 b3       	in	r18, 0x11	; 17
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_init+0xe8>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_init+0xe4>
 200:	82 2b       	or	r24, r18
 202:	81 bb       	out	0x11, r24	; 17
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
